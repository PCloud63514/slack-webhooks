name: Watch Gravitino good first issues (created-time)

on:
  schedule:
    - cron: "*/10 * * * *"   # 10분마다 실행
  workflow_dispatch:

jobs:
  watch:
    runs-on: ubuntu-latest
    env:
      OWNER: apache
      REPO: gravitino
      LABELS: good first issue            # 감시 라벨 (쉼표로 확장 가능: good first issue,help wanted)
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SINCE_MINUTES: "60"                 # 최근 60분 내 '생성된' 이슈만 확인 (테스트 시 1440으로 조정)
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Fetch issues created recently (strict create-time filter)
        id: fetch
        run: |
          SINCE_TS=$(date -u -d "@$(( $(date -u +%s) - ${SINCE_MINUTES}*60 ))" +"%Y-%m-%dT%H:%M:%SZ")
          # created: 필터를 사용해 '생성시각' 기준으로만 검색
          # label:"good first issue" → 공백을 %20로 인코딩
          Q="repo:${OWNER}/${REPO}+is:issue+is:open+label:%22${LABELS// /%20}%22+created:%3E=${SINCE_TS}"
          curl -s -H "Authorization: Bearer ${GH_TOKEN}" \
            "https://api.github.com/search/issues?q=${Q}&sort=created&order=desc&per_page=50" > result.json

      - name: Build messages (repo, title, link)
        id: build
        run: |
          python - << 'PY' > msgs.txt
          import json, os
          data = json.load(open("result.json"))
          repo = f"{os.environ['OWNER']}/{os.environ['REPO']}"
          out = []
          for it in data.get("items", []):
              # search/issues 결과에는 PR이 섞일 수 있으나 is:issue 쿼리를 넣었으므로 대부분 걸러짐
              # 안전하게 한 번 더 점검 (pull_request 키 존재 시 스킵)
              if "pull_request" in it:
                  continue
              title = it.get("title","")
              url   = it.get("html_url","")
              out.append(f"[{repo}] {title}\n{url}")
          print("\n---\n".join(out))
          PY

          # 다음 스텝에서 쓸 출력값(messages)으로 등록
          echo "messages<<EOF" >> "$GITHUB_OUTPUT"
          cat msgs.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Send to Slack (pretty)
        if: env.SLACK_WEBHOOK_URL != '' && steps.build.outputs.messages != ''
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
        run: |
          python - << 'PY'
          import os, json, urllib.request

          url  = os.environ["SLACK_WEBHOOK_URL"]
          raw  = """${{ steps.build.outputs.messages }}""".strip()
          if not raw:
              raise SystemExit(0)

          blocks = [s.strip() for s in raw.split("\n---\n") if s.strip()]
          for b in blocks:
              lines = b.splitlines()
              header = lines[0]  # 형식: "[owner/repo] 제목"
              link   = lines[-1]

              # 파싱: [owner/repo] 와 제목 분리
              repo = "apache/gravitino"
              title = header
              if header.startswith('[') and '] ' in header:
                  repo  = header[1:header.index(']')]
                  title = header.split('] ', 1)[1]

              # 요청하신 가독성 있는 포맷 (작성자 제외)
              text = (
                f"*GitHub 기여 모니터링*\n"
                f"• *리포지토리*: `{repo}`\n"
                f"• *이슈 제목*: {title}\n"
                f"• *링크*: {link}"
              )

              payload = {"text": text}
              req = urllib.request.Request(
                  url,
                  data=json.dumps(payload).encode("utf-8"),
                  headers={"Content-Type":"application/json"}
              )
              with urllib.request.urlopen(req) as resp:
                  resp.read()
          PY
